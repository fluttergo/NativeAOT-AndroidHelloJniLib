<Project Sdk="Microsoft.NET.Sdk">
	<PropertyGroup>
		<TargetFramework>net6.0</TargetFramework>
		<ImplicitUsings>enable</ImplicitUsings>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
		<Optimize>true</Optimize>
		<OutputType>Library</OutputType>
		<NativeLib>Shared</NativeLib>
		<SelfContained>true</SelfContained>
		<!--This is needed in order to build successfully Android binaries-->
		<RealRuntimeIdentifier>$(RuntimeIdentifier)</RealRuntimeIdentifier>
		<IsAndroid>$(RealRuntimeIdentifier.ToLower().StartsWith('android'))</IsAndroid>
		<TrimMode>Link</TrimMode>
		<InvariantGlobalization>true</InvariantGlobalization>
	</PropertyGroup>
	<ItemGroup>
		<PackageReference Include="Microsoft.DotNet.ILCompiler; runtime.linux-x64.Microsoft.DotNet.ILCompiler" Version="7.0.0-*" />
		<PackageReference Include="Rxmxnx.PInvoke.Extensions" Version="0.1.7" />
		<!--JNI libs needs to be compiled with -z noexecstack-->
		<LinkerArg Condition="$([MSBuild]::IsOSPlatform('Linux'))" Include="-z noexecstack" />
		<IlcArg Include="--reflectedonly" Condition="'$(IlcDisableReflection)' != 'true'" />
	</ItemGroup>
	<PropertyGroup>
		<TrimUnusedDependencies>true</TrimUnusedDependencies>
		<RootAllApplicationAssemblies>false</RootAllApplicationAssemblies>
		<IlcGenerateCompleteTypeMetadata>true</IlcGenerateCompleteTypeMetadata>
		<IlcGenerateStackTraceData>false</IlcGenerateStackTraceData>
		<IlcTrimMetadata>true</IlcTrimMetadata>
		<IlcOptimizationPreference>Speed</IlcOptimizationPreference>
		<IlcFoldIdenticalMethodBodies>true</IlcFoldIdenticalMethodBodies>
	</PropertyGroup>
	<!--Following blocks are exclusive for Android building-->
	<PropertyGroup Condition="$(IsAndroid) == 'true'">
		<!--Hack for avoid passing linux-gnu as target parameter on NDK linker invocation-->
		<CrossCompileRid />
		<CrossCompileRid Condition="'$(TargetOS)' != 'OSX' and !$(RuntimeIdentifier.EndsWith('-$(OSHostArch)'))">$(RuntimeIdentifier)</CrossCompileRid>
		<CrossCompileArch />
		<CrossCompileArch Condition="$(CrossCompileRid.EndsWith('-x64'))">x86_64</CrossCompileArch>
		<CrossCompileArch Condition="$(CrossCompileRid.EndsWith('-arm64'))">aarch64</CrossCompileArch>
		<RuntimeIlcPackageName>runtime.$(OSIdentifier)-arm64.Microsoft.DotNet.ILCompiler</RuntimeIlcPackageName>
		<!--Hack for removing non-android static libraries into the rsp file-->
		<RspPatch>'s/--directpinvoke:libSystem.Globalization.Native\n//g;s/--directpinvoke:libSystem.Net.Security.Native\n//g;s/--directpinvoke:libSystem.Security.Cryptography.Native.OpenSsl\n//g;'</RspPatch>
	</PropertyGroup>
	<ItemGroup Condition="$(IsAndroid) == 'true'">
		<!--Hack for passing a valid target argument on NDK linker invocation-->
		<LinkerArg Condition="'$(CrossCompileArch)' == 'x86_64'" Include="--target=$(CrossCompileArch)-android21" />
		<LinkerArg Condition="'$(CrossCompileArch)' != 'x86_64'" Include="--target=$(CrossCompileArch)-linux-android21" />
		<!--Adds System.Security.Cryptography.Native.Android to rsp file and linker-->
		<NetCoreAppNativeLibrary Include="System.Security.Cryptography.Native.Android" />
	</ItemGroup>
	<!--This target intercept the ilc invocation in order to remove invalid lines for Android Systems-->
	<Target Name="FixCompilation" Condition="$(IsAndroid) == 'true'" AfterTargets="WriteIlcRspFileForCompilation" BeforeTargets="IlcCompile">
		<!--Reads as lines the generated rsp file-->
		<ReadLinesFromFile File="%(ManagedBinary.IlcRspFile)">
			<Output TaskParameter="Lines" PropertyName="RspLines" />
		</ReadLinesFromFile>
		<!--Gets a single text from the rsp lines-->
		<PropertyGroup>
			<RspText Condition="$(RspLines) != ''">@(RspLines)</RspText>
		</PropertyGroup>
		<!--The sed tool is used as invalid lines remover-->
		<Exec Command="sed -i -z $(RspPatch) %(ManagedBinary.IlcRspFile)" />
	</Target>
	<!--This target intercepts the linker invocation in order to avoid an invalid target parameter for Android Systems-->
	<Target Name="FixArchitecture" Condition="$(IsAndroid) == 'true'" AfterTargets="IlcCompile" BeforeTargets="SetupOSSpecificProps">
		<!--We need NDK linker invocation to be as a non-cross compilation-->
		<PropertyGroup>
			<RuntimeIdentifier>linux-$(OSHostArch)</RuntimeIdentifier>
		</PropertyGroup>
	</Target>
	<!--This target intercepts the end of linking process for Android Systems-->
	<Target Name="FixRid" Condition="$(IsAndroid) == 'true'" AfterTargets="LinkNative">
		<!--Once NDK linker ends, we need to restore RuntimeIdentifier-->
		<PropertyGroup>
			<RuntimeIdentifier>$(RealRuntimeIdentifier)</RuntimeIdentifier>
		</PropertyGroup>
	</Target>
</Project>
